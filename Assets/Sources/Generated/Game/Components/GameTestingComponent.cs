//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity testingEntity { get { return GetGroup(GameMatcher.Testing).GetSingleEntity(); } }
    public TestingComponent testing { get { return testingEntity.testing; } }
    public bool hasTesting { get { return testingEntity != null; } }

    public GameEntity SetTesting(TestTries newValue) {
        if (hasTesting) {
            throw new Entitas.EntitasException("Could not set Testing!\n" + this + " already has an entity with TestingComponent!",
                "You should check if the context already has a testingEntity before setting it or use context.ReplaceTesting().");
        }
        var entity = CreateEntity();
        entity.AddTesting(newValue);
        return entity;
    }

    public void ReplaceTesting(TestTries newValue) {
        var entity = testingEntity;
        if (entity == null) {
            entity = SetTesting(newValue);
        } else {
            entity.ReplaceTesting(newValue);
        }
    }

    public void RemoveTesting() {
        testingEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TestingComponent testing { get { return (TestingComponent)GetComponent(GameComponentsLookup.Testing); } }
    public bool hasTesting { get { return HasComponent(GameComponentsLookup.Testing); } }

    public void AddTesting(TestTries newValue) {
        var index = GameComponentsLookup.Testing;
        var component = CreateComponent<TestingComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTesting(TestTries newValue) {
        var index = GameComponentsLookup.Testing;
        var component = CreateComponent<TestingComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTesting() {
        RemoveComponent(GameComponentsLookup.Testing);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTesting;

    public static Entitas.IMatcher<GameEntity> Testing {
        get {
            if (_matcherTesting == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Testing);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTesting = matcher;
            }

            return _matcherTesting;
        }
    }
}
